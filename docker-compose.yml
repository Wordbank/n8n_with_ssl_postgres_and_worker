x-shared: &shared
  restart: always
  image: docker.n8n.io/n8nio/n8n
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    - EXECUTIONS_MODE=queue
    - QUEUE_BULL_REDIS_HOST=redis
    - QUEUE_HEALTH_CHECK_ACTIVE=true
    - N8N_ENCRYPTION_KEY=${ENCRYPTION_KEY}

    - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
    - N8N_PORT=5678
    - N8N_PROTOCOL=https
    - NODE_ENV=production
    - N8N_PATH
    - N8N_RUNNERS_ENABLED=true
    - OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
    - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}
  links:
    - postgres
    - redis
  volumes:
    - ${DATA_FOLDER}/.n8n:/home/node/.n8n
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  caddy:
    image: "caddy:2.10"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./caddy:/etc/caddy
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
    restart: unless-stopped

  initContainer:
    image: "busybox:1.37"
    volumes:
      - ${DATA_FOLDER}/.n8n:/home/node/.n8n
    command: ["sh", "-c", "chown -R 1000:1000 /home/node/.n8n"]
  n8n:
    depends_on:
      initContainer:
        condition: service_completed_successfully
    ports:
      - "127.0.0.1:5678:5678"
    <<: *shared

  n8n-worker:
    depends_on:
      - n8n
    command: worker
    <<: *shared

  postgres:
    image: postgres:16
    volumes:
      - db_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - POSTGRES_NON_ROOT_USER
      - POSTGRES_NON_ROOT_PASSWORD
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:6-alpine
    volumes:
      - redis_storage:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

volumes:
  db_storage:
  redis_storage:
  caddy_data:
  caddy_config:
